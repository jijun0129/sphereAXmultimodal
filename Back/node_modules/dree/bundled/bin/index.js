#!/usr/bin/env node
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("../lib/index")):"function"==typeof define&&define.amd?define("dree",["../lib/index"],t):"object"==typeof exports?exports.dree=t(require("../lib/index")):e.dree=t(e.dree)}(this,(function(e){return(()=>{"use strict";var t={760:e=>{e.exports=require("yargs")},147:e=>{e.exports=require("fs")},17:e=>{e.exports=require("path")},259:t=>{t.exports=e}},o={};function n(e){var i=o[e];if(void 0!==i)return i.exports;var r=o[e]={exports:{}};return t[e](r,r.exports,n),r.exports}var i={};return(()=>{var e=i;Object.defineProperty(e,"__esModule",{value:!0});var t=n(760),o=n(17),r=n(147),s=n(259);function d(e){var t=[];if(e&&e.length)for(var o=0,n=e;o<n.length;o++){var i=n[o];t.push(new RegExp(i.replace(/\\/g,"\\\\")))}return t}function a(e){if(e)return"ascending"===e||function(e,t){return t.localeCompare(e)}}t.scriptName("dree").command("parse <source>","Save the directory tree as a text file",(function(e){return e.positional("source",{describe:"The path of the root of the directory tree",type:"string"})}),(function(e){var t=e,n={symbolicLinks:t.symbolicLinks,followLinks:t.followLinks,showHidden:t.showHidden,depth:t.depth,exclude:d(t.exclude),extensions:t.extensions,sorted:a(t.sorted),skipErrors:t.skipErrors},i=t.source,h=t.dest,l=t.name,c=t.show,u=s.parse(i,n);c&&console.log(u),(0,r.writeFileSync)((0,o.join)(h,l+".txt"),u)})).command("scan <source>","Save the directory tree as a json file",(function(e){return e.positional("source",{describe:"The path of the root of the directory tree",type:"string"})}),(function(e){var t=e,n={stat:t.stat,normalize:t.normalize,symbolicLinks:t.symbolicLinks,followLinks:t.followLinks,sizeInBytes:t.sizeInBytes,size:t.size,hash:t.hash,hashAlgorithm:t.hashAlgorithm,hashEncoding:t.hashEncoding,showHidden:t.showHidden,depth:t.depth,exclude:d(t.exclude),matches:d(t.matches),emptyDirectory:t.emptyDirectory,excludeEmptyDirectories:t.excludeEmptyDirectories,extensions:t.extensions,sorted:a(t.sorted),skipErrors:t.skipErrors},i=t.source,h=t.dest,l=t.name,c=t.show,u=JSON.stringify(s.scan(i,n));c&&console.log(u),(0,r.writeFileSync)((0,o.join)(h,l+".json"),u)})).demandCommand(1,"You must use either parse of scan command").options({dest:{alias:"d",default:process.cwd(),defaultDescription:"The path where the command was lunched",describe:"The path of the output file destination",type:"string"},name:{alias:"n",default:"tree",describe:"The output file name, without file extension",type:"string"},show:{alias:"s",default:!1,describe:"Whether you want to print the result on the command line",type:"boolean"},stat:{default:!1,describe:"Whether you want the fs.stat included in the json result",type:"boolean",hidden:!0},normalize:{default:!1,describe:"Whether you want to normalize the path in the json result",type:"boolean",hidden:!0},"symbolic-links":{default:!0,describe:"Whether you want to consider symbolic links during the elaboration, could not work on windows",type:"boolean",hidden:!0},"follow-links":{default:!1,describe:"Whether you want to follow symbolic links during the elaboration, could not work on windows",type:"boolean",hidden:!0},"size-in-bytes":{default:!0,describe:"Whether you want to include the size in bytes in the json result",type:"boolean",hidden:!0},size:{default:!0,describe:"Whether you want to include the size in a proper unit in the json result",type:"boolean",hidden:!0},hash:{default:!0,describe:"Whether you want to include the hash in the json result",type:"boolean",hidden:!0},"hash-algorithm":{default:"md5",describe:"The hash algorithm that you want to use for the hash in the json result",type:"string",choices:["md5","sha1"],hidden:!0},"hash-encoding":{default:"hex",describe:"The hash encoding that you want to use for the hash in the json result",type:"string",choiches:["hex","base64","latin1"],hidden:!0},"show-hidden":{default:!0,describe:"Whether you want to consider hidden files during the elaboration",type:"boolean",hidden:!0},depth:{default:void 0,describe:"The max depth wich could be reached during the elaboration from the given folder",type:"number",hidden:!0},exclude:{describe:"An array of regex whose all matched path will not be considered during the elaboration",type:"array",hidden:!0},matches:{describe:"It is a regex or array of regex and all the non-matching paths will not be considered by the algorithm. Note: All the ancestors of a matching node will be added",type:"array",hidden:!0},extensions:{describe:"An array of strings containing all the extensions wich will be considered",type:"array",hidden:!0},"empty-directory":{default:!1,describe:"Whether you want to include the property isEmpty in the result",type:"boolean",hidden:!0},"exclude-empty-directories":{default:!1,describe:"Whether you want to exclude all the empty directories from the result, even if they contains nodes excluded by other options",type:"boolean",hidden:!0},sorted:{default:void 0,describe:"Whether you want the result to contain values sorted in ascending or descending order. If not specified, the result values are not ordered.",type:"string",choices:["ascending","descending"],hidden:!0},"skip-errors":{default:!0,describe:"Whether you want to skip folders and files wich give errors during the execution",type:"boolean",hidden:!0},options:{alias:"o",describe:"A path to a json config file. If an option is both on the file and in the command, the command one will be considered",config:!0}}).showHidden("all-options").epilogue("For more information, find our manual at https://github.com/euberdeveloper/dree#readme").argv})(),i})()}));